/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Uint128, InstantiateMsg, Coin, ExecuteMsg, Decimal, Timestamp, Uint64, QueryMsg, Auction, ArrayOfTupleOfUint8AndAuction, Addr, Params } from "./DutchAuctionLaunchpad.types";
export interface DutchAuctionLaunchpadMsg {
  contractAddress: string;
  sender: string;
  createAuction: ({
    endPrice,
    endTime,
    inDenom,
    offeredAsset,
    startTime,
    startingPrice
  }: {
    endPrice: Decimal;
    endTime: Timestamp;
    inDenom: string;
    offeredAsset: Coin;
    startTime: Timestamp;
    startingPrice: Decimal;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  bid: ({
    auctionId
  }: {
    auctionId: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  changeParams: ({
    acceptedDenoms,
    admin,
    auctionCreationFee,
    maxAuctionDuration,
    minSecondsUntilAuctionStart
  }: {
    acceptedDenoms?: string[];
    admin?: string;
    auctionCreationFee?: Coin;
    maxAuctionDuration?: number;
    minSecondsUntilAuctionStart?: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  cancelAuction: ({
    auctionId
  }: {
    auctionId: number;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class DutchAuctionLaunchpadMsgComposer implements DutchAuctionLaunchpadMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createAuction = this.createAuction.bind(this);
    this.bid = this.bid.bind(this);
    this.changeParams = this.changeParams.bind(this);
    this.cancelAuction = this.cancelAuction.bind(this);
  }

  createAuction = ({
    endPrice,
    endTime,
    inDenom,
    offeredAsset,
    startTime,
    startingPrice
  }: {
    endPrice: Decimal;
    endTime: Timestamp;
    inDenom: string;
    offeredAsset: Coin;
    startTime: Timestamp;
    startingPrice: Decimal;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_auction: {
            end_price: endPrice,
            end_time: endTime,
            in_denom: inDenom,
            offered_asset: offeredAsset,
            start_time: startTime,
            starting_price: startingPrice
          }
        })),
        funds: _funds
      })
    };
  };
  bid = ({
    auctionId
  }: {
    auctionId: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          bid: {
            auction_id: auctionId
          }
        })),
        funds: _funds
      })
    };
  };
  changeParams = ({
    acceptedDenoms,
    admin,
    auctionCreationFee,
    maxAuctionDuration,
    minSecondsUntilAuctionStart
  }: {
    acceptedDenoms?: string[];
    admin?: string;
    auctionCreationFee?: Coin;
    maxAuctionDuration?: number;
    minSecondsUntilAuctionStart?: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          change_params: {
            accepted_denoms: acceptedDenoms,
            admin,
            auction_creation_fee: auctionCreationFee,
            max_auction_duration: maxAuctionDuration,
            min_seconds_until_auction_start: minSecondsUntilAuctionStart
          }
        })),
        funds: _funds
      })
    };
  };
  cancelAuction = ({
    auctionId
  }: {
    auctionId: number;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          cancel_auction: {
            auction_id: auctionId
          }
        })),
        funds: _funds
      })
    };
  };
}